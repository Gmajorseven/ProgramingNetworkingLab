class Edge:
    def __init__(self, u, v, weight):
        self.u = u  # ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        self.v = v  # ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        self.weight = weight  # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö

def bellman_ford(vertices, edges, source):
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏ô‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô Infinity
    distance = {v: float('inf') for v in vertices}
    distance[source] = 0  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 0

    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Relax ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (V - 1) ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    for i in range(len(vertices) - 1):
        print(f"‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i + 1}")
        for edge in edges:
            if distance[edge.u] + edge.weight < distance[edge.v]:
                distance[edge.v] = distance[edge.u] + edge.weight
                print(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á {edge.u} ‚Üí {edge.v} = {distance[edge.v]}")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏á‡∏à‡∏£‡∏•‡∏π‡∏õ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    for edge in edges:
        if distance[edge.u] + edge.weight < distance[edge.v]:
            print("‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡∏á‡∏à‡∏£‡∏•‡∏π‡∏õ‡∏ï‡∏¥‡∏î‡∏•‡∏ö (Negative cycle)!")
            return None

    return distance


# üîó ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
vertices = ['A', 'B', 'C', 'D']
edges = [
    Edge('A', 'B', 4),
    Edge('A', 'C', 5),
    Edge('B', 'C', -3),
    Edge('C', 'D', 2)
]

# üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Bellman-Ford ‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ô‡∏î A
distances = bellman_ford(vertices, edges, 'A')

# üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
if distances:
    print("\n‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å A:")
    for v in vertices:
        print(f"‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏õ {v} = {distances[v]}")

